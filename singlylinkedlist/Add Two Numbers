/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode p = l1;
        ListNode q = l2;
        ListNode newTail = null; 
        ListNode newHead = null; 
        int carry = 0;
        
        while(p != null && q != null){
            int ans = p.val + q.val + carry;
            int sum = 0;
            if (ans >= 10){
                sum = ans % 10;
                carry = ans / 10;
            }
            if (ans <= 9){
                sum = ans;
                carry = 0;
            }
            
            if (newHead == null){
                ListNode node = new ListNode(sum);
                newHead = node;
                newTail = node;
                newTail.next = null;
            }
            
            else if (newHead != null){
                ListNode node = new ListNode(sum);
                newTail.next = node;
                newTail = node; 
                newTail.next = null;
            }
            
            p = p.next;
            q = q.next;
            
        }
        
        while(p != null){
            int ans = p.val + carry;
            int sum = 0;
            if (ans >= 10){
                sum = ans % 10;
                carry = ans / 10;
            }
            if (ans <= 9){
                sum = ans;
                carry = 0;
            }
            
            ListNode node = new ListNode(sum);
            newTail.next = node;
            newTail = node; 
            newTail.next = null;
            
            p = p.next;
        }
        
        while(q != null){
            int ans = q.val + carry;
            int sum = 0;
            if (ans >= 10){
                sum = ans % 10;
                carry = ans / 10;
            }
            if (ans <= 9){
                sum = ans;
                carry = 0;
            }
            
            ListNode node = new ListNode(sum);
            newTail.next = node;
            newTail = node; 
            newTail.next = null;
            
            q = q.next;
        }
        
        if (carry != 0){
            ListNode node = new ListNode(carry);
            newTail.next = node;
            newTail = node; 
            newTail.next = null;
        }
        
        return newHead;
    }
}
